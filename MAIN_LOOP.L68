00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/26/2020 6:27:48 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Main Subroutine (decoding opcodes loop)
00000000                             3  * Written by : Daria Voblikova
00000000                             4  * Date       : 5/25/2020
00000000                             5  * Description: Gets starting address from A5 and ending address from A6, parses memory and opcodes
00000000                             6  * A5 first hold starting address and then serves as a current address
00000000                             7  *-----------------------------------------------------------
00000000                             8      * ORG    $1000
00000000                             9      
00000000  =0000000D                 10  CR      EQU     $0D
00000000  =0000000A                 11  LF      EQU     $0A
00000000                            12  
00000000  48E7 FFFE                 13  MAIN_LOOP   MOVEM.L     D0-D7/A0-A6, -(SP)          * save all registers 
00000004  BDCD                      14              CMPA.L      A5,A6                       * A6-A5
00000006  6F00 006C                 15              BLE         EXIT_MAIN_LOOP              * IF A6<=A5, we are done
0000000A  4EB9 00000032             16              JSR         PRINT_CURR_ADDR             * Print current memory location to the console
00000010  3815                      17              MOVE.W      (A5),D4                     * Load opcode word to D4, subroutines use it
00000012                            18              
00000012  43F9 0000007D             19              LEA         TAB,A1                      * Print tab
00000018  103C 000E                 20              MOVE.B      #14,D0                      * Stores task 14 in D0
0000001C  4E4F                      21              TRAP        #15                         * Task 15, print tab
0000001E                            22              
Line 23 ERROR: Undefined symbol
0000001E  6100 BCF6                 23              BSR         HEXGROUP               
00000022  DBC6                      24              ADDA.L      D6, A5                      * Add displacent located in D6 to our current address
00000024                            25              
00000024  43F9 0000007A             26              LEA         NEWLINE,A1                  * Print new line
0000002A  103C 000E                 27              MOVE.B      #14,D0                      * Stores task 14 in D0
0000002E  4E4F                      28              TRAP        #15                         * Task 15, print new line
00000030                            29  
00000030  60CE                      30              BRA         MAIN_LOOP                   * If not done yet, branch to MAIN_LOOP
00000032                            31          
00000032                            32  PRINT_CURR_ADDR
00000032  48E7 FFFE                 33              MOVEM.L     D0-D7/A0-A6, -(SP)          * Save all registers 
00000036  6100 0014                 34              BSR         CLEAR_REGISTERS             * Clears all registers except for A5 and A6 that has current and ending addresses
0000003A  220D                      35              MOVE.L      A5,D1                       * Move current address to D1 for printing
0000003C  143C 0010                 36              MOVE.B      #16,D2                      * Base 16 for for trap 15 task 15
00000040  103C 000F                 37              MOVE.B      #15,D0                      * Task 15 for printing desired base
00000044  4E4F                      38              TRAP        #15                         * Trap 15, print current address
00000046  4CDF 7FFF                 39              MOVEM.L     (SP)+, D0-D7/A0-A6          * Pop the registers back
0000004A  4E75                      40              RTS
0000004C                            41              
0000004C                            42  CLEAR_REGISTERS                                     * Clear all registers except for starting (A5) and ending(A6) address
0000004C  4280                      43              CLR.L   D0
0000004E  4285                      44              CLR.L   D5
00000050  4282                      45              CLR.L   D2
00000052  4281                      46              CLR.L   D1
00000054  4283                      47              CLR.L   D3
00000056  4284                      48              CLR.L   D4
00000058  4286                      49              CLR.L   D6
0000005A  227C 00000000             50              MOVE.L  #$00000000,A1
00000060  247C 00000000             51              MOVE.L  #$00000000,A2
00000066  267C 00000000             52              MOVE.L  #$00000000,A3
0000006C  287C 00000000             53              MOVE.L  #$00000000,A4
00000072  4E75                      54              RTS
00000074                            55  
00000074  4CDF 7FFF                 56  EXIT_MAIN_LOOP  MOVEM.L     (SP)+, D0-D7/A0-A6      * pop the registers back
00000078  4E75                      57                  RTS
0000007A                            58            
0000007A= 0D 0A 00                  59  NEWLINE       DC.B    '',CR,LF,0
0000007D= 20 20 20 20 00            60  TAB           DC.B    '    ',0
00000082                            61  
00000082                            62          * INCLUDE 'NOP_RTS_JSR.X68'             Decoding NOP, RTS, JSR opcodes
00000082                            63  
00000082                            64   * SIMHALT                                 ; halt simulator
00000082                            65  
00000082                            66  * STOP:
00000082                            67      * END    MAIN_LOOP                             ; last line of source
00000082                            68  
00000082                            69  
00000082                            70  
00000082                            71  
00000082                            72  
00000082                            73  
00000082                            74  
Line 75 WARNING: END directive missing, starting address not set

1 error detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CLEAR_REGISTERS     4C
CR                  D
EXIT_MAIN_LOOP      74
LF                  A
MAIN_LOOP           0
NEWLINE             7A
PRINT_CURR_ADDR     32
TAB                 7D
